# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: none

os:
    - linux

# compiler:
#     - gcc
#     - clang

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false

# The apt packages below are needed for sphinx builds. A full list of packages
# that can be included can be found here:
#
# https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise

addons:
    apt:
        packages:
            - graphviz
            - texlive-latex-extra
            - dvipng

env:
    global:

        # The following versions are the 'default' for tests, unless
        # overridden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - PYTHON_VERSION=3.7
        - NUMPY_VERSION=stable  # doesn't work at the moment
        - ASTROPY_VERSION=stable
        - MAIN_CMD='python setup.py'
        - SETUP_CMD='test --remote-data=any'
        - PIP_DEPENDENCIES=''
        - EVENT_TYPE='pull_request push'

        # - SRTMDATA=${TRAVIS_BUILD_DIR}/pycraf/pathprof/tests/srtm
        - SRTMDATA=${TRAVIS_BUILD_DIR}/srtm
        - OMP_NUM_THREADS=2
        - TWINE_USERNAME=bwinkel

        # For this package-template, we include examples of Cython modules,
        # so Cython is required for testing. If your package does not include
        # Cython code, you can set CONDA_DEPENDENCIES=''
        # - CONDA_DEPENDENCIES='pip wheel numpy scipy pytest astropy cython h5py matplotlib pyproj sgp4 sphinx-astropy'
        - CONDA_DEPENDENCIES='pip wheel scipy pytest cython h5py matplotlib pyproj<2 sgp4 sphinx-astropy'

        # List other runtime dependencies for the package that are available as
        # pip packages here.
        # - PIP_DEPENDENCIES=''

        # Conda packages for affiliated packages are hosted in channel
        # "astropy" while builds for astropy LTS with recent numpy versions
        # are in astropy-ci-extras. If your package uses either of these,
        # add the channels to CONDA_CHANNELS along with any other channels
        # you want to use.
        # - CONDA_CHANNELS='astropy-ci-extras astropy conda-forge'
        - CONDA_CHANNELS='conda-forge'

        # If there are matplotlib or other GUI tests, uncomment the following
        # line to use the X virtual framebuffer.
        # - SETUP_XVFB=True

        # github pages secure key
        - secure: "c9cNFhnlRkx/J5kLiP8uEwTvPDq9hPuSQXG3qiR5+JfB0CeERwr59Vuyux3g6IXmWMwqHPhIMkohV7PtnmaxRWmO0RiGhEDIZOZ5NVI5XGCIrJYuNPJ2tJnGJ3GMDqCw+Mw49MS4xx04fS0ye0StGYbP3gmMIHwIk3LCV5DPjrmlS9t/3mOry1MKlQIqXb6JocJBHtlHtK094i91arW1UG+KEVM1Xv/sjOupHKRbQ4/2OZYGx9Kzl9aeVDCxbNUyXxLd12vJKjIn5toDbzLlFuqb2VgLg2LDMdFGcL2VnUS6MUWb4nPPn20cLKv9B/5auUWC08COMg+QJTzsGUuU8fMGlgaDgB0/geXNkwnY1vF8S19sQCUW4oAU1RjOuOYMhUlxBodz/ql+RGJ6f/mBoD+FJ9aSJ9fOb1hXosFmM9KSRNaa6PiPouWQ+Xx1foaeD5DelCO9d5ZiKR63PBJby7dq1sh0DyCbi5vcqZFwwwrut27Pb6yJmyYacvbyLpbXh3BuA5V20hoOlGdzxg+aObJLx4eArwj8BoMlYvQ1up3dk558KqSCa/KZgjgg32cdGoikRn60Yywd1fZ9dtJ+ctL20U3dA3Csg4vIW+a3r0S/evrpPSTzjXxVxaqi669Svw1Hj0OtiR4rR7y+Ph6U11BT+xSsK7N0J3DrUBKiq5I="

    # matrix:
    #     # Make sure that egg_info works without dependencies
    #     - PYTHON_VERSION=3.5 SETUP_CMD='egg_info'
    #     - PYTHON_VERSION=3.6 SETUP_CMD='egg_info'

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:

        # We have to make the releases based on rather old numpy version
        # otherwise users will keep getting "incompatible API" errors
        # (For more information on ABI problems with numpy see:
        # https://stackoverflow.com/questions/17709641/valueerror-numpy-dtype-has-the-wrong-size-try-recompiling/18369312)
        # for Windows we'll use 1.11, for Linux/MacOS 1.11 is also used
        # (because with 1.9 - the conda-forge recommendation - the setup.py
        # script tries to download 1.16 for some reason...)

        # Standard linux; also used for sdist'ing
        - os: linux
          env:
            - DO_DIST=YES
            - NUMPY_VERSION=1.11
            # - ASTROPY_VERSION=stable
            - ASTROPY_VERSION=2.0.11  # need old astropy, for numpy 1.9

        # MacOS X - conda-clang
        - os: osx
          osx_image: xcode8.3
          env:
            - DO_MAC_DIST=YES
            - NUMPY_VERSION=1.11
            - COMPILER='conda-clang'
            - ASTROPY_VERSION=2.0.11  # need old astropy, for numpy 1.9

        # MacOS X - conda-gcc
        - os: osx
          osx_image: xcode8.3
          env:
            - COMPILER='conda-gcc'

        # MacOS X - gcc
        - os: osx
          osx_image: xcode8.3
          env:
            - COMPILER='gcc'

        # MacOS X - LLVM
        - os: osx
          osx_image: xcode8.3
          env:
            - CC='/usr/local/opt/llvm/bin/clang'
            - LDFLAGS='-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -lgomp'
            - CPPFLAGS='-I/usr/local/opt/llvm/include'
            - COMPILER='llvm'

        # Do a coverage test.
        - os: linux
          env: SETUP_CMD='test --remote-data=any --coverage'

        # A test without remote-data
        - os: linux
          env: SETUP_CMD='test'

        # This first builds docs, then runs tests and uploads if
        # successful, only
        - os: linux
          env:
            - PYTHON_VERSION=3.6
            - NUMPY_VERSION=1.11
            - ASTROPY_VERSION=2.0.11
            - SETUP_CMD='build_docs'
            - UPLOAD_DOCS=YES

        # Now try Astropy dev with the latest 3.x.
        - os: linux
          env: ASTROPY_VERSION=development
               EVENT_TYPE='pull_request push cron'

        # Try py35 for compatibility
        - os: linux
          env:
            - PYTHON_VERSION=3.5
            - NUMPY_VERSION=1.11
            - ASTROPY_VERSION=2.0.11  # need old astropy, for numpy 1.9

        # Do a PEP8 test with pycodestyle
        - os: linux
          env: MAIN_CMD='pycodestyle pycraf --count' SETUP_CMD=''

    allow_failures:

        # Do a PEP8 test with pycodestyle
        # (allow to fail unless your code completely compliant)
        - os: linux
          env: MAIN_CMD='pycodestyle pycraf --count' SETUP_CMD=''

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $COMPILER == "clang" ]]; then brew update; brew install libomp; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $COMPILER == "llvm" ]]; then brew update; brew install llvm; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $COMPILER == "gcc" ]]; then brew update; brew install gcc; brew link --overwrite gcc; fi
  - 'if [[ $TRAVIS_OS_NAME == "osx" && $COMPILER == "gcc" ]]; then
       gcc --version;
       gcc-6 --version && export CC="gcc-6" && export LD="gcc-6" && export LDFLAGS="-Wl,-rpath,/usr/local/opt/gcc/lib/gcc/6/" || true;
       gcc-7 --version && export CC="gcc-7" && export LD="gcc-7" && export LDFLAGS="-Wl,-rpath,/usr/local/opt/gcc/lib/gcc/7/" || true;
       gcc-8 --version && export CC="gcc-8" && export LD="gcc-8" && export LDFLAGS="-Wl,-rpath,/usr/local/opt/gcc/lib/gcc/8/" || true;
     fi'

install:

    - mkdir -p ${TRAVIS_BUILD_DIR}/srtm/

    # We now use the ci-helpers package to set up our testing environment.
    # This is done by using Miniconda and then using conda and pip to install
    # dependencies. Which dependencies are installed using conda and pip is
    # determined by the CONDA_DEPENDENCIES and PIP_DEPENDENCIES variables,
    # which should be space-delimited lists of package names. See the README
    # in https://github.com/astropy/ci-helpers for information about the full
    # list of environment variables that can be used to customize your
    # environment. In some cases, ci-helpers may not offer enough flexibility
    # in how to install a package, in which case you can have additional
    # commands in the install: section below.

    - git clone --depth 1 git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh

    - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $COMPILER == "conda-clang" ]]; then conda install -c conda-forge clang_osx-64 llvm-openmp openmp; fi
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]] && [[ $COMPILER == "conda-gcc" ]]; then conda install -c conda-forge gcc; gcc --version || true; fi

    # As described above, using ci-helpers, you should be able to set up an
    # environment with dependencies installed using conda and pip, but in some
    # cases this may not provide enough flexibility in how to install a
    # specific dependency (and it will not be able to install non-Python
    # dependencies). Therefore, you can also include commands below (as
    # well as at the start of the install section or in the before_install
    # section if they are needed before setting up conda) to install any
    # other dependencies.

script:
   - $MAIN_CMD $SETUP_CMD
   - echo "UPLOAD_DOCS" $UPLOAD_DOCS
   # have to remove the c-files, generated during build with
   # git reset --hard HEAD;
   - set -e
   # for some strange reason, the new package versions (astropy?) create
   # the _build/html in docs/docs and not in docs/
   - 'if [[ $UPLOAD_DOCS ]]; then
        $MAIN_CMD test --remote-data=any;
        conda install doctr;
        git reset --hard HEAD;
        if [[ $TRAVIS_TAG ]]; then
          doctr deploy . --no-require-master --sync --built-docs docs/docs/_build/html ;
        else
          doctr deploy --no-require-master --sync --built-docs docs/docs/_build/html "latest";
        fi
     fi'

after_success:
    # If coveralls.io is set up for this package, uncomment the line below.
    # The coveragerc file may be customized as needed for your package.
    - 'if [[ $SETUP_CMD == *coverage* ]]; then
         coveralls --rcfile="pycraf/tests/coveragerc";
       fi'

    - echo "TRAVIS_TAG" $TRAVIS_TAG
    - echo "DO_DIST" $DO_DIST
    - 'if [[ $TRAVIS_TAG && $DO_DIST ]]; then
         conda install twine;
         python setup.py sdist;
         python -m twine upload dist/*.tar.gz;
       fi'
    - echo "DO_MAC_DIST" $DO_MAC_DIST
    - 'if [[ $TRAVIS_TAG && $DO_MAC_DIST ]]; then
         conda install twine;
         python setup.py bdist_wheel;
         python -m twine upload dist/*.whl;
       fi'
